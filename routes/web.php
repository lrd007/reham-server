<?phpuse Illuminate\Http\Request;use Illuminate\Support\Facades\Log;use Illuminate\Support\Facades\Hash;use Illuminate\Support\Facades\Mail;use Illuminate\Support\Facades\Route;use Modules\Program\Entities\Program;use Illuminate\Support\Facades\Password;use Illuminate\Auth\Events\PasswordReset;use Illuminate\Support\Facades\Validator;use App\Http\Controllers\PaymentsController;use App\Http\Controllers\MyFatoorahController;use App\Http\Controllers\frontend\CartController;use App\Http\Controllers\frontend\HomeController;use App\Http\Controllers\frontend\UserController;use App\Http\Controllers\frontend\ProgramController;use Srmklive\PayPal\Services\PayPal as PayPalClient;use App\Http\Controllers\frontend\WishlistController;use App\Http\Controllers\frontend\RegistrationController;use Modules\Payment\Exports\PaymentExport;use Maatwebsite\Excel\Facades\Excel;/*|--------------------------------------------------------------------------| Web Routes|--------------------------------------------------------------------------|| Here is where you can register web routes for your application. These| routes are loaded by the RouteServiceProvider within a group which| contains the "web" middleware group. Now create something great!|*/// Route::get('/all-program', function(){//     $programs = Program::withTrashed()->find(14);//     $programs->deleted_at = null;//     $programs->start_date = "2023-12-12";//     $programs->end_date = "2024-12-01";//     $programs->save();//     dd($programs);// });Route::get('/send-test-email', function () {    try {        Mail::raw('This is a test email to check the configuration', function ($message) {            $message->to('manager@reham.com')                    ->subject('Test Email');        });        return 'Test email sent successfully!';    } catch (Exception $e) {        Log::error('Error sending test email: ' . $e->getMessage());        return 'Failed to send test email. Check the logs for more details.';    }});Route::namespace('App\Http\Controllers\frontend')->group(function () {    // Home Contoller Routes.    Route::get('/', [HomeController::class, 'home'])->name('index');    Route::get('/about', [HomeController::class, 'about'])->name('about');    Route::get('/faq', [HomeController::class, 'faq'])->name('faq');    Route::get('/legal_faq', [HomeController::class, 'legal_faq'])->name('legal_faq');    // Register Route    Route::get('/signup', [RegistrationController::class, 'register'])->name('signup');    Route::post('/signup', [RegistrationController::class, 'register_post'])->name('signup.post');    // Program Routes    Route::get('/program-details/{program}', [ProgramController::class, 'program_details'])->name('program_details');    Route::post('/payment-myfatoorah', [MyFatoorahController::class, 'index']);    Route::get('/add-payment', [MyFatoorahController::class, 'addPayment'])->name('add-payment');});Route::get('/calendar', [HomeController::class, 'calendar'])->name('calendar');// Protected Routes.Route::namespace('App\Http\Controllers\frontend')->middleware('auth')->group(function () {    // UserController Routes.    Route::get('/notification', [UserController::class, 'notification'])->name('notification');    Route::get('/profile', [UserController::class, 'profile'])->name('profile');    Route::post('/update-profile-image', [UserController::class, 'UpdateProfileImage'])->name('update_profile_image');    Route::get('/update-password', [UserController::class, 'updatePassword'])->name('updatePassword');    Route::post('/update-password', [UserController::class, 'updatePassword'])->name('update_password');    Route::get('/test-payment-export', function () {        // Static data to test the export        $payments = collect([            (object)[                'id' => 1,                'paymentid' => 'P001',                'trackid' => 'T001',                'amount' => 100,                'discount' => 5,                'payment_type' => 'Credit Card',                'subscriber' => (object)['full_name' => 'John Doe'],                'status' => 'Completed',                'created_at' => now()            ],            (object)[                'id' => 2,                'paymentid' => 'P002',                'trackid' => 'T002',                'amount' => 200,                'discount' => 10,                'payment_type' => 'PayPal',                'subscriber' => (object)['full_name' => 'Jane Smith'],                'status' => 'Pending',                'created_at' => now()            ]        ]);            return Excel::download(new PaymentExport($payments), 'Payment-Report.csv', \Maatwebsite\Excel\Excel::CSV);    });    Route::get('/technical_support', [HomeController::class, 'technical_support'])->name('technical_support');    Route::post('/technical_support_post', [HomeController::class, 'technical_support_post'])->name('technical_support_post');    Route::get('/my-programs',[HomeController::class, 'all_programs'])->name('all_programs');    // Cart Routes    Route::get('/cart', [CartController::class, 'cart'])->name('cart');    Route::get('/add-cart', [CartController::class, 'getCart']);    Route::get('/add-cart/{program_id}', [CartController::class, 'addCart'])->name('cart_post');    Route::get('/remove-cart/{program_id}', [CartController::class, 'removeCart'])->name('remove_cart');    // Wishlist Routes    Route::get('/wishlist', [WishlistController::class, 'wishlist'])->name('wishlist');    Route::get('/course/{program_id}', [ProgramController::class, 'show'])->name('single-program');    Route::get('/course/{program_id}/chapter/{course_id}', [ProgramController::class, 'chapterDetails'])->name('chapter-details');    Route::get('/course/{program_id}/bonus-material/{bonus_id}', [ProgramController::class, 'BonusMaterial'])->name('bonus-material');    Route::get('/course/{program_id}/chapter/{course_id}/lesson-general/{chapter_id}', [ProgramController::class, 'lessonDetails'])->name('lesson-details');    Route::post('/add-comment/{lesson_id}/{comment_id?}', [ProgramController::class, 'lessonComment'])->name('add-lesson-comment');    Route::post('/add-bonus-comment/{lesson_id}/{comment_id?}', [ProgramController::class, 'BonusComment'])->name('add-bonus-comment');    Route::get('/add-like/{lesson_id}', [ProgramController::class, 'like'])->name('add-lesson-like');    Route::get('/program/{program_id}/course/{course_id}/chapter/{chapter_id}/lesson/{lesson_id}', [ProgramController::class, 'singleLessonDetails'])->name('single-lesson-details');    Route::get('/lesson-mark-unmark/{lesson_id}', [ProgramController::class, 'lessonMarkAsRead'])->name('lesson-mark-unmark');    Route::get('/payment', function (Request $request) {        return view('website.profile.payment');    })->name('payment');    Route::get('/get_started', function (Request $request) {        return view('website.program.get_started');    })->name('get_started');});Route::get('/sales_page', function (Request $request) {    return view('frontend.sales_page');})->name('sales_page');Route::get('/forgot_password', function (Request $request) {    return view('frontend.forgot_password');})->name('forgot_password');Route::get('/landing_after_login', function (Request $request) {    return view('frontend.landing_after_login');})->name('landing_after_login');Route::get('/chapter', function (Request $request) {    return view('frontend.chapter');})->name('chapter');Route::get('/lesson', function (Request $request) {    return view('frontend.lesson');})->name('lesson');Route::get('/inspiring_stories', function (Request $request) {    return view('frontend.inspiring_stories');})->name('inspiring_stories');Route::get('/invoice', function (Request $request) {    return view('frontend.invoice');})->name('invoice');Route::get('/course_details', function (Request $request) {    return view('frontend.course_details');})->name('course_details');Route::get('/purchase_history', function (Request $request) {    return view('frontend.purchase_history');})->name('purchase_history');Route::get('/quiz', function (Request $request) {    return view('frontend.quiz');})->name('quiz');// Route::get('/signup', function (Request $request) {//     return view('frontend.signup');// })->name('signup');Route::get('/suggested_courses', function (Request $request) {    return view('frontend.suggested_courses');})->name('suggested_courses');Route::get('/reset_password', function (Request $request) {    return view('frontend.reset_password');})->name('reset_password');Route::get('/adding_story', function (Request $request) {    return view('frontend.adding_story');})->name('adding_story');Route::get('/course', function (Request $request) {    return view('frontend.course');})->name('course');Route::get('/cart_full', function (Request $request) {    return view('frontend.cart_full');})->name('cart_full');// Change locale route.Route::get('language/{locale}', 'LanguageController@changeLanguage')->name('language.change');// Route::post('password/reset', 'Auth\ResetPasswordController@postReset')->name('password.reset');Route::get('password/reset', function (Request $request) {    //password.reset    $input = $request->only('email', 'token', 'password', 'password_confirmation');    $validator = Validator::make($input, [        'token' => 'required',        'email' => 'required|email',        'password' => 'required|confirmed|min:8',    ]);    if ($validator->fails()) {        return response(['errors' => $validator->errors()->all()], 422);    }    $response = Password::reset($input, function ($user, $password) {        $user->forceFill([            'password' => Hash::make($password)        ])->save();        //$user->setRememberToken(Str::random(60));        event(new PasswordReset($user));    });    if ($response == Password::PASSWORD_RESET) {        $message = "Password reset successfully";    } else {        $message = "Email could not be sent to this email address";    }    $response = ['data' => '', 'message' => $message];    return response()->json($response);})->name('password.reset');// Route::get('/callback', function (Request $request) {//     dd($request->all());// });// Route::get('/myfatoorah', function (Request $request) {//     /* ------------------------ Configurations ---------------------------------- *///     //Test//     $apiURL = 'https://apitest.myfatoorah.com';//     $apiKey = 'rLtt6JWvbUHDDhsZnfpAhpYk4dxYDQkbcPTyGaKp2TYqQgG7FGZ5Th_WD53Oq8Ebz6A53njUoo1w3pjU1D4vs_ZMqFiz_j0urb_BH9Oq9VZoKFoJEDAbRZepGcQanImyYrry7Kt6MnMdgfG5jn4HngWoRdKduNNyP4kzcp3mRv7x00ahkm9LAK7ZRieg7k1PDAnBIOG3EyVSJ5kK4WLMvYr7sCwHbHcu4A5WwelxYK0GMJy37bNAarSJDFQsJ2ZvJjvMDmfWwDVFEVe_5tOomfVNt6bOg9mexbGjMrnHBnKnZR1vQbBtQieDlQepzTZMuQrSuKn-t5XZM7V6fCW7oP-uXGX-sMOajeX65JOf6XVpk29DP6ro8WTAflCDANC193yof8-f5_EYY-3hXhJj7RBXmizDpneEQDSaSz5sFk0sV5qPcARJ9zGG73vuGFyenjPPmtDtXtpx35A-BVcOSBYVIWe9kndG3nclfefjKEuZ3m4jL9Gg1h2JBvmXSMYiZtp9MR5I6pvbvylU_PP5xJFSjVTIz7IQSjcVGO41npnwIxRXNRxFOdIUHn0tjQ-7LwvEcTXyPsHXcMD8WtgBh-wxR8aKX7WPSsT1O8d8reb2aR7K3rkV3K82K_0OgawImEpwSvp9MNKynEAJQS6ZHe_J_l77652xwPNxMRTMASk1ZsJL'; //Test token value to be placed here: https://myfatoorah.readme.io/docs/test-token//     //Live//     //$apiURL = 'https://api.myfatoorah.com';//     //$apiKey = ''; //Live token value to be placed here: https://myfatoorah.readme.io/docs/live-token//     /* ------------------------ Call SendPayment Endpoint ----------------------- *///     //Fill customer address array//     /* $customerAddress = array(//   'Block'               => 'Blk #', //optional//   'Street'              => 'Str', //optional//   'HouseBuildingNo'     => 'Bldng #', //optional//   'Address'             => 'Addr', //optional//   'AddressInstructions' => 'More Address Instructions', //optional//   ); *///     //Fill invoice item array//     /* $invoiceItems[] = [//   'ItemName'  => 'Item Name', //ISBAN, or SKU//   'Quantity'  => '2', //Item's quantity//   'UnitPrice' => '25', //Price per item//   ]; *///     //Fill POST fields array//     $postFields = [//         //Fill required data//         'NotificationOption' => 'Lnk', //'SMS', 'EML', or 'ALL'//         'InvoiceValue' => '50',//         'CustomerName' => 'fname lname',//         //Fill optional data//         //'DisplayCurrencyIso' => 'KWD',//         //'MobileCountryCode'  => '+965',//         //'CustomerMobile'     => '1234567890',//         //'CustomerEmail'      => 'email@example.com',//         'CallBackUrl' => 'https://reham_web.test/callback',//         'ErrorUrl' => 'https://reham_web.test/error', //or 'https://example.com/error.php'//         //'Language'           => 'en', //or 'ar'//         //'CustomerReference'  => 'orderId',//         //'CustomerCivilId'    => 'CivilId',//         //'UserDefinedField'   => 'This could be string, number, or array',//         //'ExpiryDate'         => '', //The Invoice expires after 3 days by default. Use 'Y-m-d\TH:i:s' format in the 'Asia/Kuwait' time zone.//         //'SourceInfo'         => 'Pure PHP', //For example: (Symfony, CodeIgniter, Zend Framework, Yii, CakePHP, etc)//         //'CustomerAddress'    => $customerAddress,//         //'InvoiceItems'       => $invoiceItems,//     ];//     //Call endpoint//     $data = sendPayment($apiURL, $apiKey, $postFields);//     //You can save payment data in database as per your needs//     $invoiceId = $data->InvoiceId;//     $paymentLink = $data->InvoiceURL;//     //Redirect your customer to the invoice page to complete the payment process//     //Display the payment link to your customer//     echo "Click on <a href='$paymentLink' target='_blank'>$paymentLink</a> to pay with invoiceID $invoiceId.";// });Route::post('/inquiry_success', function (Request $request) {    $trandata = $request->trandata;    // dd($trandata);    require(app_path('iPayFSSNetPipe.php'));    $myObj = new iPayFSSNetPipe();    $myObj->setResourcePath(app_path("")); //Resource File Path, provide the actual resource path    $myObj->setKeystorePath(app_path("/")); //KeystorePath File provide the actual Keystore path    $myObj->setAlias("REHAMHOUSE"); //Terminal Alias Name // 1  Purchase    $myObj->parseEncryptedResult(trim($trandata));    dd($myObj->getResult(), $myObj->getPaymentId(), $myObj->getTransId(), $myObj->getAmt(), $myObj->getTrackId());});Route::post('/success', function (Request $request) {    //dd($request->all());    //if ($request->isset('trandata'));    $trandata = $request->trandata;    // dd($trandata);    require(app_path('iPayFSSNetPipe.php'));    $myObj = new iPayFSSNetPipe();    $myObj->setResourcePath(app_path("")); //Resource File Path, provide the actual resource path    $myObj->setKeystorePath(app_path("/")); //KeystorePath File provide the actual Keystore path    $myObj->setAlias("REHAMHOUSE"); //Terminal Alias Name // 1  Purchase    $myObj->parseEncryptedRequest(trim($trandata));    //dd($myObj->getResult(), $myObj->getPaymentId(), $myObj->getTransId(), $myObj->getAmt(), $myObj->getTrackId());    // if ($myObj->getResult() == "NOT+CAPTURED" || $myObj->getResult() == "NOT CAPTURED") {    // }    if ($myObj->getResult() == "CAPTURED") {        $myObj->setAction("8");        $myObj->setType("C");        $myObj->setAmt($myObj->getAmt());        $myObj->setCurrency("414");        $myObj->setLanguage("en");        $myObj->setResponseURL("http://reham_web.test/inquiry_success");        $myObj->setErrorURL("http://reham_web.test/inquiry_failed");        $myObj->setTransId($myObj->getPaymentId());        $myObj->setUdf5("PaymentID");        if (trim($myObj->performTransactionHTTP()) != 0) {            $myObj->getError(); // Problem in connecting the Payment Gateway        } else {            //To redirect the web address.            header("location:" . $myObj->getwebAddress()); // To connect Payment Gateway        }    }});Route::get('/debug', function (Request $request) {    //Include or Require    require(app_path('iPayFSSNetPipe.php'));    //Initialization    $myObj = new iPayFSSNetPipe();    $myObj->setResourcePath(app_path("")); //Resource File Path, provide the actual resource path    $myObj->setKeystorePath(app_path("/")); //KeystorePath File provide the actual Keystore path    $myObj->setAlias("REHAMHOUSE"); //Terminal Alias Name // 1  Purchase    $myObj->setAction("1"); //Transaction Action Code //Transaction Currency    $myObj->setCurrency("414"); //Currency Code    $myObj->setLanguage("en"); //Language    //Success URL    $myObj->setResponseURL("http://reham_web.test/success");    //Error URL    $myObj->setErrorURL("http://reham_web.test/failed");    //Transaction Amount    $myObj->setAmt("100");    $myObj->setTrackId(mt_rand());    //Merchant Track ID. Unique number generated by the Merchant $myObj->setTrackId(123456789);    //User Defined Fields    //Actual value should be provided properly during the UAT and production.    $myObj->setUdf1("udf1");    $myObj->setUdf2("udf2");    $myObj->setUdf3("udf3");    $myObj->setUdf4("udf4");    $myObj->setUdf5("udf5");    // For Hosted Payment Integration( Single Step integration), the method to be called is    if (trim($myObj->performPaymentInitializationHTTP()) != 0) {        $myObj->getError(); // Problem in connecting the Payment Gateway    } else {        //To redirect the web address.        // dd($myObj->getwebAddress());        header("location:" . $myObj->getwebAddress()); //To connect Gateway    }    /** End of Request Processing**/});Route::get('/test', function(){    return view('website.test');}); // Payment Method\Route::prefix('payment')->group(function () {    Route::middleware('auth')->group(function () {        Route::post('check-payment-method',[PaymentsController::class,'checkPaymentMethod'])->name('check-payment-method');        Route::post('/KnetPaymentSuccess', [PaymentsController::class,'KnetPaymentSuccess'])->name('KnetPaymentSuccess');        Route::get('/KnetPaymentFailed', [PaymentsController::class,'KnetPaymentFailed'])->name('KnetPaymentFailed');        Route::post('/CreditCardPaymentInquiry', [PaymentsController::class,'CreditCardPaymentInquiry'])->name('CreditCardPaymentInquiry');        Route::post('/CreditCardPaymentSuccess', [PaymentsController::class,'CreditCardPaymentSuccess'])->name('CreditCardPaymentSuccess');        Route::get('/CreditCardPaymentFailed', [PaymentsController::class,'CreditCardPaymentFailed'])->name('CreditCardPaymentFailed');        // Knet Callback URL            //Route::get('/MyFatoorahCallback', [PaymentsController::class,'MyFatoorahCallback'])->name('MyFatoorahCallback');        // Route::get('/MyFatoorahFailed', 'ApiController@MyFatoorahFailed');    });    Route::get('/paypalSuccess', [PaymentsController::class,'paypalSuccess'])->name('paypalSuccess');    Route::get('/paypalFailed', [PaymentsController::class,'paypalFailed'])->name('paypalFailed');});Route::get('/hello',function (){    $provider = new PayPalClient;    $provider->setApiCredentials(config('paypal'));    $provider->getAccessToken();    $response = $provider->capturePaymentOrder('9MC16029071891243');    dd($response);    if (isset($response['status']) && $response['status'] == 'COMPLETED') {        return redirect()            ->route('paypal')            ->with('success', 'Transaction complete.');    } else {        return redirect()            ->route('paypal')            ->with('error', $response['message'] ?? 'Something went wrong.');    }});